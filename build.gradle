plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.combimagnetron'
version = '1.0'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        name = 'spigot-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        url = 'https://repo.dmulloy2.net/repository/public/'
    }
    maven {
        url = 'https://jitpack.io'
    }
}


dependencies {

}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.2'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation name: 'imageloader'
    implementation 'net.kyori:adventure-api:4.11.0'
    implementation 'net.kyori:adventure-platform-bukkit:4.1.2'
    implementation 'net.kyori:adventure-text-serializer-gson:4.11.0'
    implementation 'net.kyori:adventure-text-serializer-plain:4.11.0'
    implementation 'com.github.retrooper.packetevents:spigot:2.0-SNAPSHOT'
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 16
    targetCompatibility = 16
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    shadowJar {
        relocate 'com.github.retrooper.packetevents', 'com.combimagnetron.lib.packetevents'
        relocate 'net.kyori', 'com.combimagnetron.lib.kyori'
    }
}
